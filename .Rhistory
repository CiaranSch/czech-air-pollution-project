beta <- apply(bicycle, 2, mean) - mu
# b
epsilon <- sweep(sweep(bicycle - mu, 1, alpha, "-"), 2, beta, "-")
sum(epsilon^2)
residual.sum.squares <- sum(epsilon^2)
RSS <- sum(epsilon^2)
beta
beta^2
sum(beta^2)
# c
SS.alpha = n*sum(alpha^2)
(SS.alpha/(m-1)) / (RSS/((m-1)(n-1)))
(SS.alpha/(m-1)) / (RSS/((m-1)*(n-1)))
m*sum(beta^2)
# d
SS.beta = m*sum(beta^2)
F.alpha = (SS.alpha/(m-1)) / (RSS/((m-1)*(n-1)))
F.beta = (SS.beta/(n-1)) / (RSS/((m-1)*(n-1)))
# e
bicycle
# e
library(tidyr)
gather(bicycle, vehicle, distance, Car:HGV)
# e
library(tidyverse)
# e
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
as.data.frame(bicycle)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
data_long <- gather(as.data.frame(bicycle), vehicle, distance, Car:HGV)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
data_long <- gather(as.data.frame(bicycle), vehicle, distance)
# e
library(tidyverse)
# e
library(tidyr)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
data_long <- gather(as.data.frame(bicycle), vehicle, distance)
as.data.frame(bicycle)
gather(data=as.data.frame(bicycle), key=vehicle, value=distance)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
data_long <-
gather(data=as.data.frame(bicycle), key=vehicle, value=distance)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
gather(data=as.data.frame(bicycle), key=vehicle, value=distance)
library(dplyr)
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
gather(data=as.data.frame(bicycle), key=vehicle, value=distance)
## Example 1 ##
library(ggplot2)
absence <- data.frame("absences"=c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 4, 10, 39),
"ID"=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
ggplot(absence) +
geom_point(aes(x = absences, y=ID))+
theme(axis.title.y=element_blank(),axis.text.y = element_blank(), axis.ticks.y = element_blank())+
xlab("Number of days absence")
## Example 2 ##
library(gridExtra)
boxplot<-ggplot(cars, aes(x="", y=Price)) +
geom_boxplot()+
xlab("Price ($ Thousand)") +
ylab("Price ($ Thousand)")
hist<-ggplot(cars, aes(x=Price)) +
geom_histogram(binwidth=5, fill="white", color="black") +
xlab("Price ($ Thousand)")
grid.arrange(hist, boxplot, ncol=2)
## Example 2 ##
install.packages("gridExtra")
library(gridExtra)
boxplot<-ggplot(cars, aes(x="", y=Price)) +
geom_boxplot()+
xlab("Price ($ Thousand)") +
ylab("Price ($ Thousand)")
hist<-ggplot(cars, aes(x=Price)) +
geom_histogram(binwidth=5, fill="white", color="black") +
xlab("Price ($ Thousand)")
grid.arrange(hist, boxplot, ncol=2)
load("C:/Users/cschu/Dropbox/Masters/Learning from Data/Data/week_2.RData")
boxplot<-ggplot(cars, aes(x="", y=Price)) +
geom_boxplot()+
xlab("Price ($ Thousand)") +
ylab("Price ($ Thousand)")
hist<-ggplot(cars, aes(x=Price)) +
geom_histogram(binwidth=5, fill="white", color="black") +
xlab("Price ($ Thousand)")
grid.arrange(hist, boxplot, ncol=2)
# The boxplot on the right highlights that there are five large values in the dataset and in fact these have been flagged
# in R as outliers and displayed as circles.
summary(cars$Price)
## Example 3 ##
stress <- data.frame("dentists"=c(13.3, 60, 25 ,1.7), "group"=c("N", "O", "M", "S"))
ggplot(stress, aes(x=group, y=dentists)) +
geom_bar(stat="identity", fill="grey", color="black")
## Example 4 ##
gold <- olympic[olympic$Medal == "Gold", ]
ggplot(gold, aes(x=Year, y=Time)) +
geom_point() +
xlab("Year") +
ylab("Time (seconds)")
## Task 2 ##
inflation <- data.frame("infla"=c(6.5, 14.0, 13.5, 18.0, 14.5, 9.0, 18.0,
42.0, 7.5, 6.0, 25.0, 12.0, 52.0, 20.0,
16.0, 15.0, 11.5, 2.5, 2.0))
inflation
ggplot(inflation) +
geom_point()
stem(inflation$infla, scale=2)
summary(inflation$infla)
ggplot(inflation, aes(x="", y=infla)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ylab("% inflation")
putt2<-ggplot(shotputt, aes(x=shot.putt, y=log(power.clean))) +
geom_point() +
xlab("Shot Putt (m)") +
ylab("log(Power Clean Weight Lift (kg))")
## Example 5 ##
putt1<-ggplot(shotputt, aes(x=shot.putt, y=power.clean)) +
geom_point() +
xlab("Shot Putt (m)") +
ylab("Power Clean Weight Lift (kg)")
putt2<-ggplot(shotputt, aes(x=shot.putt, y=log(power.clean))) +
geom_point() +
xlab("Shot Putt (m)") +
ylab("log(Power Clean Weight Lift (kg))")
grid.arrange(putt1, putt2, ncol=2)
## Example 6 ##
s02$decimalyear <- s02$Years+s02$Weeks/52
# this creates a decimal year variable to have a time variable that is continuous
ggplot(s02, aes(x=decimalyear, y=ln.SO2.)) +
geom_point() +
xlab("Year") +
ylab("log(SO2)")
## Example 7 ##
cheese.bed <- data.frame("cheese" = c(29.8, 30.1, 30.5, 30.6, 31.3, 31.7, 32.6, 33.1, 32.7, 32.8),
"bedsheets" = c(327, 456, 509, 497, 596, 573, 661, 741, 809, 717))
cheese.bed.1<-ggplot(cheese.bed, aes(x=cheese, y=bedsheets)) +
geom_point() +
xlab("cheese consumption(lbs)") +
ylab("No. of people that died")
div.marg<-data.frame("divorce"=c(5,4.7,4.6,4.4,4.3,4.1,4.2,4.2,4.2,4.1),
"marg"=c(8.2, 7, 6.5, 5.3, 5.2, 4, 4.6, 4.5, 4.2, 3.7))
div.marg.1<-ggplot(div.marg, aes(x=divorce, y=marg)) +
geom_point() +
xlab("Divorce rate (per 1,000 people)") +
ylab("Margarine consumption(lbs)")
par(mfrow=c(1,1))
grid.arrange(cheese.bed.1, div.marg.1, ncol=2)
## Example 8 ##
cat<-ggplot(cats, aes(x=still, y=flow)) +
geom_point() +
xlab("Still Water, ml") +
ylab("Flowing Water, ml") +
geom_abline(intercept = 0, slope = 1) # this provides a line of equality y=x
cats$diffs <- cats$flow-cats$still
diff<-ggplot(cats, aes(x="", y=diffs)) +
geom_boxplot() +
ylab("water drinking (flow-still)") +
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
geom_hline(yintercept = 0, colour="red", lty=2) # this adds a horizontal line at 0
grid.arrange(cat, diff, ncol=2)
## Example 9 ##
data(co2)
ts.plot(co2)
co2
## Task 3 ##
dog1<-ggplot(dogs, aes(x=SC_pre, y=SC_post)) +
geom_point() +
xlab("Salivary Cortisol Pre") +
ylab("Salivary Cortisol Post") +
geom_abline(intercept = 0, slope = 1)
dog2<-ggplot(dogs, aes(x="", y=dSC_popr)) +
geom_boxplot() +
ylab("Difference in Salivary Cortisol (post - pre)") +
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks.x = element_blank())
grid.arrange(dog1, dog2, ncol=2)
dog3<-ggplot(dogs, aes(x=PC_pre, y=PC_post)) +
geom_point() +
xlab("Plasma Cortisol Pre") +
ylab("Plasma Cortisol Post") +
geom_abline(intercept = 0, slope = 1)
dog4<-ggplot(dogs, aes(x="", y=dPC_popr)) +
geom_boxplot() +
ylab("Difference in Plasma Cortisol (post - pre)") +
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks.x = element_blank())
grid.arrange(dog3, dog4, ncol=2)
summary(dogs$SC_pre)
sd(dogs$SC_pre)
summary(dogs$SC_post)
sd(dogs$SC_post)
summary(dogs$PC_pre)
sd(dogs$PC_pre)
summary(dogs$PC_post)
sd(dogs$PC_post)
## Task 4 ##
Beef_low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78)
Beef_low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78)
Beef_high <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111)
Cereal_low <- c(107, 95, 97, 80, 98, 74, 74, 67, 89, 58)
Cereal_high <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
summary(Beef_low)
summary(Beef_low)[1]
summary(Beef_low)[3,2,5]
summary(Beef_low)[c(3,2,5)]
summary(Beef_low)[c(3,2,5)]
summary(Beef_high)[c(3,2,5)]
summary(Cereal_low)[c(3,2,5)]
summary(Cereal_high)[c(3,2,5)]
Beef_low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78)
Beef_high <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111)
Cereal_low <- c(107, 95, 97, 80, 98, 74, 74, 67, 89, 58)
Cereal_high <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
Beef_low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78)
Beef_high <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111)
Cereal_low <- c(107, 95, 97, 80, 98, 74, 74, 67, 89, 58)
Cereal_high <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
Beef_low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78)
Beef_high <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111)
Cereal_low <- c(107, 95, 97, 80, 98, 74, 74, 67, 89, 58)
Cereal_high <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
summary(Beef_low)[c(3,2,5)]
summary(Beef_high)[c(3,2,5)]
summary(Cereal_low)[c(3,2,5)]
summary(Cereal_high)[c(3,2,5)]
shiny::runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp()
runApp()
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
x <- 2
x
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp()
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
runApp()
runApp('C:/Users/cschu/Dropbox/Masters/R Programming/Project')
stations_selected <- c("Belotin", "Beroun", "Bily Kriz", "Brandys n. Labem")
stations[stations$StationName %in% stations_selected,]
stations
stations[stations$StationName %in% stations_selected,]
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", pollutant_selected, ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", pollutant_selected, ".csv")))
}
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", pollutant_selected, ".csv")))
}
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
setwd("C:/Users/cschu/Dropbox/Masters/R Programming/Project/Data")
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
setwd("C:/Users/cschu/Dropbox/Masters/R Programming/Project")
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
data
data <- data %>%
left_join(stations[,c(1,8)], by=c("AirQualityStationEoICode" = "EoICode")) %>%     # join station names
transform(Date=as.Date(str_c(Day, Month, Year, sep="/"), "%d/%m/%Y")) %>%          # create date field
transform(Month_Date=as.Date(paste0("2000-",format(Date, "%j")), "%Y-%j")) %>%     # create Month-Day field
transform(DayOfWeek=factor(weekdays(Date),                                         # create day of the week field
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
transform(HourOfWeek=(as.integer(DayOfWeek)-1)*24+Hour) %>%                        # create hour of the week field
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek, HourOfWeek, Hour) %>%
summarise(Concentration=mean(Concentration))
data
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(hours_over_threshold=n())
threshold=40
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(hours_over_threshold=n())
data2
ggplot() +
geom_point(data=data2, aes(x=Month_Date, y=Concentration, colour=StationName), size=3, alpha=0.5) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
ggplot() +
geom_point(data=data2, aes(x=Month_Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
#### Calander ####
ggplot() +
plot + geom_line(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=0.8)
#### Calander ####
ggplot() +
geom_line(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=0.8)
#### Calander ####
ggplot() +
geom_point(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=0.8)
#### Calander ####
ggplot() +
geom_point(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5)
runApp()
stations_selected <- c("Praha 10−Prumyslova", "Praha 10−Vrsovice", "Praha 2−Riegrovy sady", "Praha 5−Smichov")
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
data <- data %>%
left_join(stations[,c(1,8)], by=c("AirQualityStationEoICode" = "EoICode")) %>%     # join station names
transform(Date=as.Date(str_c(Day, Month, Year, sep="/"), "%d/%m/%Y")) %>%          # create date field
transform(Month_Date=as.Date(paste0("2000-",format(Date, "%j")), "%Y-%j")) %>%     # create Month-Day field
transform(DayOfWeek=factor(weekdays(Date),                                         # create day of the week field
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
transform(HourOfWeek=(as.integer(DayOfWeek)-1)*24+Hour) %>%                        # create hour of the week field
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek, HourOfWeek, Hour) %>%
summarise(Concentration=mean(Concentration))
threshold=40
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(hours_over_threshold=n())
#### Calander ####
ggplot() +
geom_point(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5)
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5, width=0.1)
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5, width=0.01)
ggplot() +
geom_point(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5)
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5, width=0.001)
x <- c(1,2,3)
if (2 in x) {
x
}
x <- c(1,2,3)
if (2 %in% x) {
x
}
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5)
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5, width=0.1)
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Concentration=n())
data2
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=Concentration, colour=StationName), size=3, alpha=0.5, width=0.1)
threshold=60
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Concentration=n())
#### Calander ####
ggplot() +
geom_jitter(data=data2, aes(x=Date, y=Concentration, colour=StationName), size=3, alpha=0.5, width=0.1)
ggplot() +
geom_point(data=data2, aes(x=Date, y=hours_over_threshold, colour=StationName), size=3, alpha=0.5)
ggplot() +
geom_point(data=data2, aes(x=Date, y=Concentration, colour=StationName), size=3, alpha=0.5)
runApp()
runApp()
threshold=50
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
#### Seasonal effect ####
ggplot() +
geom_point(data=data2, aes(x=Month_Date, y=Count, colour=StationName), size=3, alpha=0.5) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
stations_selected <- c("Praha 10−Prumyslova", "Praha 10−Vrsovice", "Praha 2−Riegrovy sady", "Praha 5−Smichov")
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
data <- data %>%
left_join(stations[,c(1,8)], by=c("AirQualityStationEoICode" = "EoICode")) %>%     # join station names
transform(Date=as.Date(str_c(Day, Month, Year, sep="/"), "%d/%m/%Y")) %>%          # create date field
transform(Month_Date=as.Date(paste0("2000-",format(Date, "%j")), "%Y-%j")) %>%     # create Month-Day field
transform(DayOfWeek=factor(weekdays(Date),                                         # create day of the week field
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
transform(HourOfWeek=(as.integer(DayOfWeek)-1)*24+Hour) %>%                        # create hour of the week field
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek, HourOfWeek, Hour) %>%
summarise(Concentration=mean(Concentration))
threshold=50
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
#### Seasonal effect ####
ggplot() +
geom_point(data=data2, aes(x=Month_Date, y=Count, colour=StationName), size=3, alpha=0.5) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
stations <- read_csv("Data/__Stations.csv")
files <- list.files(path="Data",pattern="^CZ0")
PM2.5 <- stations[stations$EoICode %in% str_sub(files[str_detect(files, "PM2.5")], 1, 7),8]
PM10 <- stations[stations$EoICode %in% str_sub(files[str_detect(files, "PM10")], 1, 7),8]
NO2 <- stations[stations$EoICode %in% str_sub(files[str_detect(files, "NO2")], 1, 7),8]
SO2 <- stations[stations$EoICode %in% str_sub(files[str_detect(files, "SO2")], 1, 7),8]
PM2.5 <- PM2.5[order(PM2.5$StationName),]
PM10 <- PM10[order(PM10$StationName),]
NO2 <- NO2[order(NO2$StationName),]
SO2 <- SO2[order(SO2$StationName),]
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
data <- data %>%
left_join(stations[,c(1,8)], by=c("AirQualityStationEoICode" = "EoICode")) %>%     # join station names
transform(Date=as.Date(str_c(Day, Month, Year, sep="/"), "%d/%m/%Y")) %>%          # create date field
transform(Month_Date=as.Date(paste0("2000-",format(Date, "%j")), "%Y-%j")) %>%     # create Month-Day field
transform(DayOfWeek=factor(weekdays(Date),                                         # create day of the week field
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
transform(HourOfWeek=(as.integer(DayOfWeek)-1)*24+Hour) %>%                        # create hour of the week field
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek, HourOfWeek, Hour) %>%
summarise(Concentration=mean(Concentration))
data = data.frame()
for (item in stations_selected) {
print(str_c("Data/", stations$EoICode[stations$StationName==item], "_", "PM10", ".csv"))
data <- rbind(data,
read_csv(str_c("Data/", stations$EoICode[stations$StationName==item],
"_", "PM10", ".csv")))
}
data <- data %>%
left_join(stations[,c(1,8)], by=c("AirQualityStationEoICode" = "EoICode")) %>%     # join station names
transform(Date=as.Date(str_c(Day, Month, Year, sep="/"), "%d/%m/%Y")) %>%          # create date field
transform(Month_Date=as.Date(paste0("2000-",format(Date, "%j")), "%Y-%j")) %>%     # create Month-Day field
transform(DayOfWeek=factor(weekdays(Date),                                         # create day of the week field
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
transform(HourOfWeek=(as.integer(DayOfWeek)-1)*24+Hour) %>%                        # create hour of the week field
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek, HourOfWeek, Hour) %>%
summarise(Concentration=mean(Concentration))
threshold=50
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
#### Seasonal effect ####
ggplot() +
geom_point(data=data2, aes(x=Month_Date, y=Count, colour=StationName), size=3, alpha=0.5) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
ggplot() +
geom_jitter(data=data2, aes(x=Month_Date, y=Count, colour=StationName), size=3, alpha=0.5, width=0.01) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
threshold=100
data2 <- data %>% filter(Concentration>threshold) %>%
group_by(StationName, Year, Month, Day, Month_Date, Date, DayOfWeek) %>%
summarise(Count=n())
ggplot() +
geom_jitter(data=data2, aes(x=Month_Date, y=Count, colour=StationName), size=3, alpha=0.5, width=0.01) +
scale_x_date(labels = function(x) format(x, "%b"), date_breaks="1 month") +
xlab("Seasonal Effect")
runApp()
